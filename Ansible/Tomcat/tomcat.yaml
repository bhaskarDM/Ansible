---
- name: installing tomcat
  become: yes
  hosts: all
  vars:
    - home_dir: /opt/tomcat
    - user_name: tomcat
    - default_shell: /bin/false
    - tomcat_version: 9.0.70
    - tomcat_latest: /opt/tomcat/latest
    - tomcat_bin_directory: /opt/tomcat/latest/bin/
    - tomcat_service_location: /etc/systemd/system/tomcat.service
    - java_home: /usr/lib/jvm/java-11-openjdk-amd64
    - tomcat_admin_user: devops
    - tomcat_admin_password: devops
    - tomcat_user_relatice: conf/tomcat-users.xml
    - tomcat_context_regex: ".*"
    - tomcat_context_files_locations:
      - /opt/tomcat/latest/webapps/manager/META-INF/context.xml
      - /opt/tomcat/latest/webapps/host-manager/META-INF/context.xml
  tasks:
    - name: update cache
      apt:
        update_cache: yes
      when: ansible_facts['os_family']=="Debian"
    - name: find all sh files
      ansible.builtin.find:
        paths: "{{ tomcat_bin_directory }}"
        patterns: "*.sh"
      when: ansible_facts['os_family']=="Debian"
      register: sh_files_tomcat_bin
    - name: install java
      ansible.builtin.apt:
        update_cache: yes
        name: openjdk-11-jdk
        state: present
      when: ansible_facts['os_family']=="Debian"
    - name: create a system user
      ansible.builtin.user:
        create_home: yes
        name: "{{ user_name }}"
        home: "{{ home_dir }}"
        shell: "{{ default_shell }}"
        state: present
      when: ansible_facts['os_family']=="Debian"
    - name: download tomcat
      ansible.builtin.get_url:
        url: "https://www-eu.apache.org/dist/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
      when: ansible_facts['os_family']=="Debian"
    - name: extract zip files
      ansible.builtin.unarchive:
        creates: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        remote_src: true
        group: "{{ user_name }}"
        user: "{{ user_name }}"
      when: ansible_facts['os_family']=="Debian"
    - name: create sym link
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ tomcat_latest }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        state: link
      when: ansible_facts['os_family']=="Debian"
    - name: change ownership to tomcat user
      ansible.builtin.file:
        path: "{{ home_dir }}"
        state: directory
        recurse: yes
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
      when: ansible_facts['os_family']=="Debian"
    - name: make all shell scripts executable
      ansible.builtin.file:
         path: '{{ item.path }}'
         owner: "{{ user_name }}"
         group: "{{ user_name }}"
         mode: '0755'
      loop: "{{ sh_files_tomcat_bin.files }}"
      when: ansible_facts['os_family']=="Debian"
    - name: copy tomcat service file
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: "{{ tomcat_service_location }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
      when: ansible_facts['os_family']=="Debian"
      notify:
        - to reload,enable and start service
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers
    - name: ensure tomcat service is running
      ansible.builtin.systemd:
        name: 'tomcat.service'
        state: 'started'
      when: ansible_facts['os_family']=="Debian"
    - name: create tomcat user file
      ansible.builtin.template:
        src: 'tomcat_user.xml.j2'
        dest: "{{ tomcat_latest }}/{{ tomcat_user_relatice }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
      when: ansible_facts['os_family']=="Debian"
      notify:
        - to reload,enable and start service
    - name: added manager and host manager context to access from all ip address
      ansible.builtin.template:
        src: 'manager.xml.j2'
        dest: "{{ item }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
      when: ansible_facts['os_family']=="Debian"
      loop: "{{ tomcat_context_files_locations }}"
      notify:
        - to reload,enable and start service
  handlers:
    - name: to reload,enable and start service
      ansible.builtin.systemd:
        name: 'tomcat.service'
        daemon_reload: yes
        enabled: yes
        state: restarted
      when: ansible_facts['os_family']=="Debian"
